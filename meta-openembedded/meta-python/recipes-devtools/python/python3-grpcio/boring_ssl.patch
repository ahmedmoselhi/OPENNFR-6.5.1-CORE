Do not poke at the build machine to determine target platform or architecture
pass it from environment instead for cross compiling to work

Upstream-Status: Inappropriate [OE-Specific]
Signed-off-by: Khem Raj <raj.khem@gmail.com>
--- a/setup.py
+++ b/setup.py
@@ -109,6 +109,8 @@ CLASSIFIERS = [
 BUILD_WITH_BORING_SSL_ASM = os.environ.get('GRPC_BUILD_WITH_BORING_SSL_ASM',
                                            True)
 
+BORING_SSL_PLATFORM = os.environ.get('GRPC_BORING_SSL_PLATFORM',
+                                           True)
 # Environment variable to determine whether or not the Cython extension should
 # *use* Cython or use the generated C files. Note that this requires the C files
 # to have been generated by building first *with* Cython support. Even if this
@@ -306,15 +308,15 @@ asm_key = ''
 if BUILD_WITH_BORING_SSL_ASM and not BUILD_WITH_SYSTEM_OPENSSL:
     LINUX_X86_64 = 'linux-x86_64'
     LINUX_ARM = 'linux-arm'
-    if LINUX_X86_64 == util.get_platform():
+    if LINUX_X86_64 == BORING_SSL_PLATFORM:
         asm_key = 'crypto_linux_x86_64'
-    elif LINUX_ARM == util.get_platform():
+    elif LINUX_ARM == BORING_SSL_PLATFORM:
         asm_key = 'crypto_linux_arm'
-    elif "mac" in util.get_platform() and "x86_64" in util.get_platform():
+    elif "mac" in BORING_SSL_PLATFORM and "x86_64" in BORING_SSL_PLATFORM:
         asm_key = 'crypto_mac_x86_64'
     else:
         print("ASM Builds for BoringSSL currently not supported on:",
-              util.get_platform())
+              BORING_SSL_PLATFORM)
 if asm_key:
     asm_files = grpc_core_dependencies.ASM_SOURCE_FILES[asm_key]
 else:
